// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/market/market.proto

package go_micro_service_market

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Market service

func NewMarketEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Market service

type MarketService interface {
	CreateMarket(ctx context.Context, in *MarketInfo, opts ...client.CallOption) (*MarketID, error)
	FindMarketByID(ctx context.Context, in *MarketID, opts ...client.CallOption) (*MarketInfo, error)
}

type marketService struct {
	c    client.Client
	name string
}

func NewMarketService(name string, c client.Client) MarketService {
	return &marketService{
		c:    c,
		name: name,
	}
}

func (c *marketService) CreateMarket(ctx context.Context, in *MarketInfo, opts ...client.CallOption) (*MarketID, error) {
	req := c.c.NewRequest(c.name, "Market.CreateMarket", in)
	out := new(MarketID)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketService) FindMarketByID(ctx context.Context, in *MarketID, opts ...client.CallOption) (*MarketInfo, error) {
	req := c.c.NewRequest(c.name, "Market.FindMarketByID", in)
	out := new(MarketInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Market service

type MarketHandler interface {
	CreateMarket(context.Context, *MarketInfo, *MarketID) error
	FindMarketByID(context.Context, *MarketID, *MarketInfo) error
}

func RegisterMarketHandler(s server.Server, hdlr MarketHandler, opts ...server.HandlerOption) error {
	type market interface {
		CreateMarket(ctx context.Context, in *MarketInfo, out *MarketID) error
		FindMarketByID(ctx context.Context, in *MarketID, out *MarketInfo) error
	}
	type Market struct {
		market
	}
	h := &marketHandler{hdlr}
	return s.Handle(s.NewHandler(&Market{h}, opts...))
}

type marketHandler struct {
	MarketHandler
}

func (h *marketHandler) CreateMarket(ctx context.Context, in *MarketInfo, out *MarketID) error {
	return h.MarketHandler.CreateMarket(ctx, in, out)
}

func (h *marketHandler) FindMarketByID(ctx context.Context, in *MarketID, out *MarketInfo) error {
	return h.MarketHandler.FindMarketByID(ctx, in, out)
}
